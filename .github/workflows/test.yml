on:
  push:
    branches:
      - master

name: Test
jobs:
  install:
    runs-on: ubuntu-latest
    if: github.repository == 'angristan/nginx-autoinstall' && github.actor == 'angristan'
    strategy:
      matrix:
        os-image:
          - debian-9-x64
          - debian-10-x64
          - ubuntu-16-04-x64
          - ubuntu-18-04-x64
          - ubuntu-20-04-x64
        nginx-version:
          - STABLE
          - MAINLINE
    steps:
      - uses: actions/checkout@v2

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create server
        run: doctl compute droplet create nginx-action-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER-${{ matrix.os-image }}-${{ matrix.nginx-version }} --size s-1vcpu-1gb --image ${{ matrix.os-image }} --region lon1 --enable-ipv6 --ssh-keys 75:cd:f2:4a:70:dc:aa:f5:c2:72:cd:ab:f1:19:cf:b0 --wait

      - name: Get server ID
        run: echo ::set-output name=value::$(doctl compute droplet list -o json | jq -r '.[] | select(.name == "'nginx-action-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER-${{ matrix.os-image }}-${{ matrix.nginx-version }}'").id')
        id: server_id

      - name: Move server to dedicated project
        run: doctl projects resources assign ${{ secrets.DIGITALOCEAN_PROJECT_ID }} --resource=do:droplet:${{ steps.server_id.outputs.value }}

      - name: Wait for server to boot
        run: sleep 90

      - name: Get server IP
        run: echo ::set-output name=value::$(doctl compute droplet list -o json | jq -r '.[] | select(.name == "'nginx-action-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER-${{ matrix.os-image }}-${{ matrix.nginx-version }}'").networks.v4 | .[] | select(.type == "'public'").ip_address')
        id: server_ip

      - name: Get server OS
        run: echo ::set-output name=value::$(echo ${{ matrix.os-image }} | cut -d '-' -f1)
        id: server_os

      - name: Setup remote server (Debian/Ubuntu)
        if: steps.server_os.outputs.value == 'debian' || steps.server_os.outputs.value == 'ubuntu'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: set -x && apt-get update && apt-get install -y git

      - name: Setup remote server (Fedora)
        if: steps.server_os.outputs.value == 'fedora'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: set -x && dnf install -y git

      - name: Setup remote server (CentOS)
        if: steps.server_os.outputs.value == 'centos'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: set -x && yum install -y git

      - name: Download repo and checkout current commit
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: set -x && git clone https://github.com/angristan/nginx-autoinstall.git && cd nginx-autoinstall

      - name: Run nginx-autoinstall.sh in headless mode
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: 'set -x && HEADLESS=y NGINX_VER=${{ matrix.nginx-version }} bash -x ~/nginx-autoinstall/nginx-autoinstall.sh && ps aux | grep nginx | grep -v grep > /dev/null 2>&1 && echo "Success: Nginx is running" && exit 0 || echo "Failure: Nginx is not running" && exit 1'

      - name: Delete server
        run: doctl compute droplet delete -f nginx-action-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER-${{ matrix.os-image }}-${{ matrix.nginx-version }}
        if: always()
